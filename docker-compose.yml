version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres
    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d ecommerce_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Java API (using Python Flask mock)
  java-api:
    image: python:3.11-slim
    container_name: ecommerce-java-api
    working_dir: /app
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=sqlite:///ecommerce.db
    ports:
      - "8080:8080"
    volumes:
      - ./backend/java-api:/app
    command: ["sh", "-c", "apt-get update && apt-get install -y curl && pip install -r requirements.txt && python app.py"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python AI Service
  python-ai:
    image: python:3.11-slim
    container_name: ecommerce-python-ai
    working_dir: /app
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://ecommerce_user:password123@postgres:5432/ecommerce_db
      - REDIS_HOST=redis
      - JAVA_API_BASE_URL=http://java-api:8080
    ports:
      - "8001:8001"
    volumes:
      - ./backend/python-ai:/app
    command: ["sh", "-c", "apt-get update && apt-get install -y curl && pip install -r requirements.txt && uvicorn main:app --host 0.0.0.0 --port 8001"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    image: node:18-alpine
    container_name: ecommerce-frontend
    working_dir: /app
    environment:
      - VITE_API_BASE_URL=http://localhost:8080
      - VITE_AI_API_BASE_URL=http://localhost:8001
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: ["sh", "-c", "npm install && npm run dev -- --host 0.0.0.0"]
    depends_on:
      - java-api
      - python-ai
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx
    ports:
      - "80:80"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - java-api
      - python-ai
    networks:
      - ecommerce-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge
